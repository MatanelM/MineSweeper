    //represent the place on the grid for a Block and Mine
export class Location{
    // properties list :
    //id_                   id generated by the coordinates
    private _id : string = ''
    // horizontal_          horizontal line
    protected _horizontal : number ;
    // vertical_            vertical line
    protected _vertical : number ;
    // is_mined_            is mined **out
    //protected _is_mined:boolean ;
    // is_numbered_         is numbered **out
    //protected _is_numbered:boolean;
    // number_              number of the location.isMined around this location which return true **out
    //  protected _number:number;
    //construcor
    constructor (horizontal_ : number,vertical_ : number){

        this._horizontal = horizontal_;
        this._vertical = vertical_;
        // this._is_mined = is_mined_;
        // this._is_numbered = is_numbered_;
        // this._number = number_;

        if(horizontal_>=10) this._id = ''+horizontal_;
        else this._id = '0'+horizontal_;
        if(vertical_>=10) this._id += vertical_;
        else this._id += '0'+vertical_;

    }

    //getters & setters
    get horizontal() : number {
        return this._horizontal;
    }
    set horizontal(value : number){
        this._horizontal = value;
    }
    get vertical() : number {
        return this._vertical;
    }
    set vertical(value : number ){
        this._vertical = value;
    }
    // get isMined():boolean{
    //     return this._is_mined;
    // }
    // set isMined(value : boolean){
    //     this._is_mined = value;
    // }
    // get isNumbered() : boolean{
    //     return this._is_numbered;
    // }
    // set isNumbered(value : boolean){
    //     this._is_numbered = value;
    // }
    // get numberOfMines() : number{
    //     return this._number;
    // }
    // set numberOfMines(value : number ){
    //     this._number = value;
    // }
    get id(){
      return this._id;
    }


    idToNums( id ){
        var nums : number[] = [Number.parseInt(id.slice(0,2)),Number.parseInt(id.slice(2,4))]
        return nums;
    }
    numsToId( nums : number[] ){
        var id : string = '';
        if(nums[0]>=10) id = ''+nums[0];
        else id = '0'+nums[0];
        if(nums[1]>=10) id += nums[1];
        else id += '0'+nums[1];
    }

    equal(loc):boolean{
        return (this._horizontal==loc.horizontal && this.vertical==loc.vertical);
    }
}
